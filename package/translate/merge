#!/usr/bin/env bash
# Version: 23

SCRIPT=$(realpath "$0")
SCRIPT_PATH=$(dirname "$SCRIPT")

# https://techbase.kde.org/Development/Tutorials/Localization/i18n_Build_Systems
# https://techbase.kde.org/Development/Tutorials/Localization/i18n_Build_Systems/Outside_KDE_repositories
# https://invent.kde.org/sysadmin/l10n-scripty/-/blob/master/extract-messages.sh

pushd "$SCRIPT_PATH" || exit

plasmoidName='xyz.attacktive.nyan-wanderer'
widgetName="${plasmoidName##*.}" # Strip namespace
website='https://github.com/Attacktive/nyan-wanderer'
bugAddress="$website"
packageRoot="$SCRIPT_PATH/.." # Root of translatable sources

### Colors
# https://stackoverflow.com/questions/5947742/how-to-change-the-output-color-of-echo-in-linux
# https://stackoverflow.com/questions/911168/how-can-i-detect-if-my-shell-script-is-running-through-a-pipe
TC_Red=$'\033[31m'
TC_Orange=$'\033[33m'
TC_LightGray=$'\033[90m'
TC_LightRed=$'\033[91m'
TC_LightGreen=$'\033[92m'
TC_Yellow=$'\033[93m'
TC_LightBlue=$'\033[94m'
TC_Reset=$'\033[0m'
TC_Bold=$'\033[1m'
if [ ! -t 1 ]; then
	TC_Red=''
	TC_Orange=''
	TC_LightGray=''
	TC_LightRed=''
	TC_LightGreen=''
	TC_Yellow=''
	TC_LightBlue=''
	TC_Bold='';
	TC_Reset='';
fi

echoTC() {
	text="$1"
	textColor="$2"
	printf "%s%s%s\n" "$textColor" "$text" "$TC_Reset"
}
echoGray() { echoTC "$1" "$TC_LightGray"; }
echoRed() { echoTC "$1" "$TC_Red"; }
echoGreen() { echoTC "$1" "$TC_LightGreen"; }
echoBlue() { echoTC "$1" "$TC_LightBlue"; }

#---
if [ -z "$plasmoidName" ]; then
	echoRed "[translate/merge] Error: Couldn't read plasmoidName."
	exit
fi

if [ -z "$(which xgettext)" ]; then
	echoRed '[translate/merge] Error: xgettext command not found. Need to install gettext'
	echoRed "[translate/merge] Running ${TC_Bold}'sudo pacman -S gettext'"
	sudo pacman -S gettext
	echoRed '[translate/merge] gettext installation should be finished. Going back to merging translations.'
fi

#---
if [ -z "$plasmoidName" ]; then
	echo "[merge] Error: Couldn't read plasmoidName."
	exit
fi

echo '[merge] Extracting messages'

path_to_infiles_list="$SCRIPT_PATH/infiles.list"
find "${packageRoot}" -name '*.cpp' -o -name '*.h' -o -name '*.c' -o -name '*.qml' -o -name '*.js' | sort > "$path_to_infiles_list"

path_to_template_pot="$SCRIPT_PATH/template.pot"
path_to_new_template_pot="$SCRIPT_PATH/template.pot.new"

xgettext \
	--files-from="$path_to_infiles_list" \
	--from-code=UTF-8 \
	--width=400 \
	--add-location=file \
	-C -kde -ci18n -ki18n:1 -ki18nc:1c,2 -ki18np:1,2 -ki18ncp:1c,2,3 -ktr2i18n:1 -kI18N_NOOP:1 \
	-kI18N_NOOP2:1c,2 -kN_:1 -kaliasLocale -kki18n:1 -kki18nc:1c,2 -kki18np:1,2 -kki18ncp:1c,2,3 \
	--package-name="${widgetName}" \
	--msgid-bugs-address="${bugAddress}" \
	-D "${packageRoot}" \
	-D "$SCRIPT_PATH" \
	-o "$path_to_new_template_pot" \
	|| \
	{ echo '[merge] error while calling xgettext. aborting.'; exit 1; }

sed -i 's/"Content-Type: text\/plain; charset=CHARSET\\n"/"Content-Type: text\/plain; charset=UTF-8\\n"/' "$path_to_new_template_pot"
sed -i 's/# SOME DESCRIPTIVE TITLE./'"# Translation of ${widgetName} in LANGUAGE"'/' "$path_to_new_template_pot"
sed -i 's/# Copyright (C) YEAR THE PACKAGE'"'"'S COPYRIGHT HOLDER/'"# Copyright (C) $(date +%Y)"'/' "$path_to_new_template_pot"

if [ -f "$path_to_template_pot" ]; then
	newPotDate=$(grep 'POT-Creation-Date:' "$path_to_new_template_pot" | sed 's/.\{3\}$//')
	oldPotDate=$(grep 'POT-Creation-Date:' "$path_to_template_pot" | sed 's/.\{3\}$//')
	sed -i 's/'"${newPotDate}"'/'"${oldPotDate}"'/' "$path_to_new_template_pot"
	changes=$(diff "$path_to_template_pot" "$path_to_new_template_pot")
	if [ -n "$changes" ]; then
		# There's been changes
		sed -i 's/'"${oldPotDate}"'/'"${newPotDate}"'/' "$path_to_new_template_pot"
		mv "$path_to_new_template_pot" "$path_to_template_pot"

		addedKeys=$(echo "$changes" | grep "> msgid" | cut -c 9- | sort)
		removedKeys=$(echo "$changes" | grep "< msgid" | cut -c 9- | sort)
		echo ''
		echoGreen 'Added Keys:'
		echoGreen "$addedKeys"
		echo ''
		echoRed 'Removed Keys:'
		echoRed "$removedKeys"
		echo ''
	else
		# No changes
		rm "$path_to_new_template_pot"
	fi
else
	# template.pot didn't already exist
	mv "$path_to_new_template_pot" "$path_to_template_pot"
fi

path_to_readme="$SCRIPT_PATH/README.md"

potMessageCount=$(grep -Pzo 'msgstr ""\n(\n|$)' "$path_to_template_pot" | grep -c 'msgstr ""')
echo '## Translation' > "$path_to_readme"
echo '' >> "$path_to_readme"
echo '|  Locale  |  Lines  | % Done|' >> "$path_to_readme"
echo '|----------|---------|-------|' >> "$path_to_readme"
entryFormat='| %-8s | %7s | %5s |'
templateLine=$(perl -e "printf(\"$entryFormat\", \"Template\", \"${potMessageCount}\", \"\")")
echo "$templateLine" >> "$path_to_readme"

rm "$SCRIPT_PATH/infiles.list"
echoBlue '[translate/merge] Done extracting messages'

echoGray '[translate/merge] Merging messages'
catalogs=$(find . -name '*.po' | sort)
for cat in $catalogs; do
	echoGray "[translate/merge] Updating ${cat}"
	catLocale=$(basename "${cat%.*}")

	widthArg=''
	catUsesGenerator=$(grep 'X-Generator:' "$cat")
	if [ -z "$catUsesGenerator" ]; then
		widthArg='--width=400'
	fi

	compendiumArg=''
	if [ -n "$COMPENDIUM_DIR" ]; then
		langCode=$(basename "${cat%.*}")
		compendiumPath=$(realpath "$COMPENDIUM_DIR/compendium-${langCode}.po")
		if [ -f "$compendiumPath" ]; then
			echo "compendiumPath=$compendiumPath"
			compendiumArg="--compendium=$compendiumPath"
		fi
	fi

	cp "$cat" "$cat.new"
	sed -i 's/"Content-Type: text\/plain; charset=CHARSET\\n"/"Content-Type: text\/plain; charset=UTF-8\\n"/' "$cat.new"

	msgmerge \
		${widthArg} \
		--add-location=file \
		--no-fuzzy-matching \
		"${compendiumArg}" \
		-o "$cat.new" \
		"$cat.new" "$path_to_template_pot"

	sed -i 's/# SOME DESCRIPTIVE TITLE./'"# Translation of ${widgetName} in ${catLocale}"'/' "$cat.new"
	sed -i 's/# Translation of '"${widgetName}"' in LANGUAGE/'"# Translation of ${widgetName} in ${catLocale}"'/' "$cat.new"
	sed -i 's/# Copyright (C) YEAR THE PACKAGE'"'"'S COPYRIGHT HOLDER/'"# Copyright (C) $(date +%Y)"'/' "$cat.new"

	poEmptyMessageCount=$(grep -Pzo 'msgstr ""\n(\n|$)' "$cat.new" | grep -c 'msgstr ""')
	poMessagesDoneCount=$((potMessageCount - poEmptyMessageCount))
	poCompletion=$((poMessagesDoneCount * 100 / potMessageCount))
	poLine=$(perl -e "printf(\"$entryFormat\", \"$catLocale\", \"${poMessagesDoneCount}/${potMessageCount}\", \"${poCompletion}%\")")
	echo "$poLine" >> "$path_to_readme"

	mv "$cat.new" "$cat"
done
echoBlue '[translate/merge] Done merging messages'

echoBlue '[translate/merge] Done merge script'

popd || exit
